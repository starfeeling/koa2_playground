#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('demo:server')
const http = require('http')
const config = require('../config')

console.log(`process.env.NODE_ENV=${process.env.NODE_ENV}`)


const fs = require('fs')
const logConfig = require('../config/log_config')

/**
 * check path
 */
const confirmPath = (pathStr) => {
	if (!fs.existsSync(pathStr)) {
		fs.mkdirSync(pathStr)
		console.log(`createPath: ${pathStr}`)
	}
}

/**
 * init log path
 */
const initLogPath = () => {
	if (logConfig.baseLogPath) {
		confirmPath(logConfig.baseLogPath)

		logConfig.appenders.forEach((logConfigAppenders) => {
			if (logConfigAppenders.path) {
				confirmPath(logConfig.baseLogPath + logConfigAppenders.path)
			}
		})
	}
}

initLogPath()

/**
 * Normalize a port into a number, string, or false.
 * @param {number} port
 * @param {number} val
 */

function normalizePort(val) {
	const port = parseInt(val, 10)

	if (typeof port === 'number') {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

const port = normalizePort(config.port || '3000')
console.log(`port = ${config.port}`)

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback())

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address()
	const bind = typeof addr === 'string'
		? `pipe ${addr}`
		: `port ${addr.port}`
	debug(`Listening on ${bind}`)
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error
	}

	const bind = typeof port === 'string'
		? `Pipe ${port}`
		: `Port ${port}`

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(`${bind} requires elevated privileges`)
		process.exit(1)
		break
	case 'EADDRINUSE':
		console.error(`${bind} is already in use`)
		process.exit(1)
		break
	default:
		throw error
	}
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

